
External interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e0  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000592  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c3  00000000  00000000  00000ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001188  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036a  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  0000159a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_2>
   c:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  64:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

ISR(INT0_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	PORTC ^= 0x01;
  7c:	95 b3       	in	r25, 0x15	; 21
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	89 27       	eor	r24, r25
  82:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	81 ee       	ldi	r24, 0xE1	; 225
  88:	94 e0       	ldi	r25, 0x04	; 4
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <__vector_1+0x1e>
  92:	00 c0       	rjmp	.+0      	; 0x94 <__vector_1+0x28>
  94:	00 00       	nop
	_delay_ms(200);
}
  96:	9f 91       	pop	r25
  98:	8f 91       	pop	r24
  9a:	2f 91       	pop	r18
  9c:	0f 90       	pop	r0
  9e:	0f be       	out	0x3f, r0	; 63
  a0:	0f 90       	pop	r0
  a2:	1f 90       	pop	r1
  a4:	18 95       	reti

000000a6 <__vector_2>:

ISR(INT1_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	PORTC ^= 0x02;
  b6:	95 b3       	in	r25, 0x15	; 21
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	89 27       	eor	r24, r25
  bc:	85 bb       	out	0x15, r24	; 21
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	80 e7       	ldi	r24, 0x70	; 112
  c2:	92 e0       	ldi	r25, 0x02	; 2
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <__vector_2+0x1e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <__vector_2+0x28>
  ce:	00 00       	nop
	_delay_ms(100);
}
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	2f 91       	pop	r18
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <__vector_3>:

ISR(INT2_vect){
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	PORTC ^= 0x04;
  f0:	95 b3       	in	r25, 0x15	; 21
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	89 27       	eor	r24, r25
  f6:	85 bb       	out	0x15, r24	; 21
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	80 e7       	ldi	r24, 0x70	; 112
  fc:	92 e0       	ldi	r25, 0x02	; 2
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <__vector_3+0x1e>
 106:	00 c0       	rjmp	.+0      	; 0x108 <__vector_3+0x28>
 108:	00 00       	nop
	_delay_ms(100);
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <main>:
int main(){
	DDRB = 0x00; DDRC=0x07; DDRD = 0x00;
 11a:	17 ba       	out	0x17, r1	; 23
 11c:	87 e0       	ldi	r24, 0x07	; 7
 11e:	84 bb       	out	0x14, r24	; 20
 120:	11 ba       	out	0x11, r1	; 17
	PORTB = 0x04; PORTC = 0x00; PORTD = 0x0C;
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	88 bb       	out	0x18, r24	; 24
 126:	15 ba       	out	0x15, r1	; 21
 128:	8c e0       	ldi	r24, 0x0C	; 12
 12a:	82 bb       	out	0x12, r24	; 18
	GICR = 0xE0; MCUCR = 0x05; MCUCSR = 0x00;
 12c:	80 ee       	ldi	r24, 0xE0	; 224
 12e:	8b bf       	out	0x3b, r24	; 59
 130:	85 e0       	ldi	r24, 0x05	; 5
 132:	85 bf       	out	0x35, r24	; 53
 134:	14 be       	out	0x34, r1	; 52
	sei();
 136:	78 94       	sei
	while(1){
		PORTC ^= 0x04;
 138:	94 e0       	ldi	r25, 0x04	; 4
 13a:	85 b3       	in	r24, 0x15	; 21
 13c:	89 27       	eor	r24, r25
 13e:	85 bb       	out	0x15, r24	; 21
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	33 ed       	ldi	r19, 0xD3	; 211
 144:	80 e3       	ldi	r24, 0x30	; 48
 146:	21 50       	subi	r18, 0x01	; 1
 148:	30 40       	sbci	r19, 0x00	; 0
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x2c>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x36>
 150:	00 00       	nop
 152:	f3 cf       	rjmp	.-26     	; 0x13a <main+0x20>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>

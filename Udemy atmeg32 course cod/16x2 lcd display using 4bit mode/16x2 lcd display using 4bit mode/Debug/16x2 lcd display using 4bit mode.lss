
16x2 lcd display using 4bit mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000156  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ea  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000618  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000332  00000000  00000000  00001096  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000379  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001db  00000000  00000000  000017b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 93 00 	call	0x126	; 0x126 <main>
  7a:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <cmd>:
}

*/

void cmd(char a){
	PORTC = (a & 0xFF);
  82:	85 bb       	out	0x15, r24	; 21
	PORTD = 0x20;
  84:	20 e2       	ldi	r18, 0x20	; 32
  86:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	ef ec       	ldi	r30, 0xCF	; 207
  8a:	f7 e0       	ldi	r31, 0x07	; 7
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <cmd+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <cmd+0x10>
  92:	00 00       	nop
	_delay_ms(1);
	PORTD = 0x00;
  94:	12 ba       	out	0x12, r1	; 18
	
	PORTC = ((a<<4) & 0xF0);
  96:	f0 e1       	ldi	r31, 0x10	; 16
  98:	8f 9f       	mul	r24, r31
  9a:	c0 01       	movw	r24, r0
  9c:	11 24       	eor	r1, r1
  9e:	85 bb       	out	0x15, r24	; 21
	PORTD = 0x20;
  a0:	22 bb       	out	0x12, r18	; 18
  a2:	8f e9       	ldi	r24, 0x9F	; 159
  a4:	9f e0       	ldi	r25, 0x0F	; 15
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <cmd+0x24>
  aa:	00 c0       	rjmp	.+0      	; 0xac <cmd+0x2a>
  ac:	00 00       	nop
	_delay_ms(2);
	PORTD = 0x00;
  ae:	12 ba       	out	0x12, r1	; 18
  b0:	08 95       	ret

000000b2 <data>:
}

void data(char a){
	PORTC = (a & 0xF0);
  b2:	98 2f       	mov	r25, r24
  b4:	90 7f       	andi	r25, 0xF0	; 240
  b6:	95 bb       	out	0x15, r25	; 21
	PORTD = 0xA0;
  b8:	30 ea       	ldi	r19, 0xA0	; 160
  ba:	32 bb       	out	0x12, r19	; 18
  bc:	ef e9       	ldi	r30, 0x9F	; 159
  be:	ff e0       	ldi	r31, 0x0F	; 15
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <data+0xe>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <data+0x14>
  c6:	00 00       	nop
	_delay_ms(2);
	PORTD = 0x80;
  c8:	20 e8       	ldi	r18, 0x80	; 128
  ca:	22 bb       	out	0x12, r18	; 18
	
	PORTC = ((a<<4) & 0xF0);
  cc:	f0 e1       	ldi	r31, 0x10	; 16
  ce:	8f 9f       	mul	r24, r31
  d0:	c0 01       	movw	r24, r0
  d2:	11 24       	eor	r1, r1
  d4:	85 bb       	out	0x15, r24	; 21
	PORTD = 0xA0;
  d6:	32 bb       	out	0x12, r19	; 18
  d8:	8f e9       	ldi	r24, 0x9F	; 159
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <data+0x2a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <data+0x30>
  e2:	00 00       	nop
	_delay_ms(2);
	PORTD = 0x80;
  e4:	22 bb       	out	0x12, r18	; 18
  e6:	08 95       	ret

000000e8 <display>:
}

void display(char *a){
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	ec 01       	movw	r28, r24
	while((*a) != '\0'){
  ee:	88 81       	ld	r24, Y
  f0:	88 23       	and	r24, r24
  f2:	31 f0       	breq	.+12     	; 0x100 <display+0x18>
  f4:	21 96       	adiw	r28, 0x01	; 1
		data(*a);
  f6:	0e 94 59 00 	call	0xb2	; 0xb2 <data>
	_delay_ms(2);
	PORTD = 0x80;
}

void display(char *a){
	while((*a) != '\0'){
  fa:	89 91       	ld	r24, Y+
  fc:	81 11       	cpse	r24, r1
  fe:	fb cf       	rjmp	.-10     	; 0xf6 <display+0xe>
		data(*a);
		a++;
	}
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <lcd_init>:

void lcd_init(){
	cmd(0x02);
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	cmd(0x28);
 10c:	88 e2       	ldi	r24, 0x28	; 40
 10e:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	cmd(0x0E);
 112:	8e e0       	ldi	r24, 0x0E	; 14
 114:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	cmd(0x01);
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	cmd(0x80);
 11e:	80 e8       	ldi	r24, 0x80	; 128
 120:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
 124:	08 95       	ret

00000126 <main>:
			_delay_ms(1);
		}
	}
***/
int main(){
	DDRC = 0xF0; DDRD = 0xE0;
 126:	80 ef       	ldi	r24, 0xF0	; 240
 128:	84 bb       	out	0x14, r24	; 20
 12a:	80 ee       	ldi	r24, 0xE0	; 224
 12c:	81 bb       	out	0x11, r24	; 17
	PORTC = 0x00; PORTD = 0x00;
 12e:	15 ba       	out	0x15, r1	; 21
 130:	12 ba       	out	0x12, r1	; 18
	
	lcd_init();
 132:	0e 94 83 00 	call	0x106	; 0x106 <lcd_init>
	display("Hellow world");
 136:	80 e6       	ldi	r24, 0x60	; 96
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 74 00 	call	0xe8	; 0xe8 <display>
	cmd(0xC0);
 13e:	80 ec       	ldi	r24, 0xC0	; 192
 140:	0e 94 41 00 	call	0x82	; 0x82 <cmd>
	display("Embedded Systems");
 144:	8d e6       	ldi	r24, 0x6D	; 109
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 74 00 	call	0xe8	; 0xe8 <display>
}
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>

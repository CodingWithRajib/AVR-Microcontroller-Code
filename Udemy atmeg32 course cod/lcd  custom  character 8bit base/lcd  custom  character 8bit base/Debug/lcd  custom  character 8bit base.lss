
lcd  custom  character 8bit base.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000190  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000990  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000323  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000153c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000386  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000206  00000000  00000000  00001926  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  64:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <cmd>:




void cmd(char a){
	DDRC = a;
  6c:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x02;
  6e:	82 e0       	ldi	r24, 0x02	; 2
  70:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	8f e1       	ldi	r24, 0x1F	; 31
  74:	9e e4       	ldi	r25, 0x4E	; 78
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <cmd+0xa>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <cmd+0x10>
  7c:	00 00       	nop
	_delay_ms(10);
	DDRD = 0x00;
  7e:	11 ba       	out	0x11, r1	; 17
  80:	8f e6       	ldi	r24, 0x6F	; 111
  82:	97 e1       	ldi	r25, 0x17	; 23
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <cmd+0x18>
  88:	00 c0       	rjmp	.+0      	; 0x8a <cmd+0x1e>
  8a:	00 00       	nop
  8c:	08 95       	ret

0000008e <data>:
	_delay_ms(3);
}


void data(char a){
	DDRC = a;
  8e:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xA0;
  90:	80 ea       	ldi	r24, 0xA0	; 160
  92:	81 bb       	out	0x11, r24	; 17
  94:	8f e1       	ldi	r24, 0x1F	; 31
  96:	9e e4       	ldi	r25, 0x4E	; 78
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <data+0xa>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <data+0x10>
  9e:	00 00       	nop
	_delay_ms(10);
	DDRD = 0x80;
  a0:	80 e8       	ldi	r24, 0x80	; 128
  a2:	81 bb       	out	0x11, r24	; 17
  a4:	8f e6       	ldi	r24, 0x6F	; 111
  a6:	97 e1       	ldi	r25, 0x17	; 23
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <data+0x1a>
  ac:	00 c0       	rjmp	.+0      	; 0xae <data+0x20>
  ae:	00 00       	nop
  b0:	08 95       	ret

000000b2 <lcd_init>:
	_delay_ms(3);
}


void lcd_init(){
	cmd(0x38); //8bit mode enable
  b2:	88 e3       	ldi	r24, 0x38	; 56
  b4:	0e 94 36 00 	call	0x6c	; 0x6c <cmd>
	cmd(0x01); // clear the display screen
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 36 00 	call	0x6c	; 0x6c <cmd>
	cmd(0x0E); //Display on, cursor blinking
  be:	8e e0       	ldi	r24, 0x0E	; 14
  c0:	0e 94 36 00 	call	0x6c	; 0x6c <cmd>
	cmd(0x80); //force the cursor to the beginning of the 1st time
  c4:	80 e8       	ldi	r24, 0x80	; 128
  c6:	0e 94 36 00 	call	0x6c	; 0x6c <cmd>
  ca:	08 95       	ret

000000cc <lcd_custom_character>:
}

void lcd_custom_character(){
	cmd(0x48); //address where customized character is to be stored
  cc:	88 e4       	ldi	r24, 0x48	; 72
  ce:	0e 94 36 00 	call	0x6c	; 0x6c <cmd>
	
	data(0x00); data(0x0A); data(0x15); data(0x11);
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 47 00 	call	0x8e	; 0x8e <data>
  d8:	8a e0       	ldi	r24, 0x0A	; 10
  da:	0e 94 47 00 	call	0x8e	; 0x8e <data>
  de:	85 e1       	ldi	r24, 0x15	; 21
  e0:	0e 94 47 00 	call	0x8e	; 0x8e <data>
  e4:	81 e1       	ldi	r24, 0x11	; 17
  e6:	0e 94 47 00 	call	0x8e	; 0x8e <data>
	data(0x12); data(0x00); data(0x00); data(0x00);
  ea:	82 e1       	ldi	r24, 0x12	; 18
  ec:	0e 94 47 00 	call	0x8e	; 0x8e <data>
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 47 00 	call	0x8e	; 0x8e <data>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 47 00 	call	0x8e	; 0x8e <data>
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 47 00 	call	0x8e	; 0x8e <data>
	cmd(0x80);		//Location of LCD where the character is to be displayed
 102:	80 e8       	ldi	r24, 0x80	; 128
 104:	0e 94 36 00 	call	0x6c	; 0x6c <cmd>
	data(0x01);		// Displaying the character created at address 0x50
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 47 00 	call	0x8e	; 0x8e <data>
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	80 e7       	ldi	r24, 0x70	; 112
 112:	92 e0       	ldi	r25, 0x02	; 2
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <lcd_custom_character+0x48>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_custom_character+0x52>
 11e:	00 00       	nop
	_delay_ms(100); 
	
	cmd(0x50);		//address where customized character is to be stored
 120:	80 e5       	ldi	r24, 0x50	; 80
 122:	0e 94 36 00 	call	0x6c	; 0x6c <cmd>
	data(0x00); data(0x00); data(0x0A); data(0x00);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 47 00 	call	0x8e	; 0x8e <data>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 47 00 	call	0x8e	; 0x8e <data>
 132:	8a e0       	ldi	r24, 0x0A	; 10
 134:	0e 94 47 00 	call	0x8e	; 0x8e <data>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 47 00 	call	0x8e	; 0x8e <data>
	data(0x04); data(0x00); data(0x0E); data(0x11);
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	0e 94 47 00 	call	0x8e	; 0x8e <data>
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 47 00 	call	0x8e	; 0x8e <data>
 14a:	8e e0       	ldi	r24, 0x0E	; 14
 14c:	0e 94 47 00 	call	0x8e	; 0x8e <data>
 150:	81 e1       	ldi	r24, 0x11	; 17
 152:	0e 94 47 00 	call	0x8e	; 0x8e <data>
	cmd(0x82);		//Location of lcd where the character is to be displayed
 156:	82 e8       	ldi	r24, 0x82	; 130
 158:	0e 94 36 00 	call	0x6c	; 0x6c <cmd>
	data(0x02);		//Displaying  the character created at address 0x50
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	0e 94 47 00 	call	0x8e	; 0x8e <data>
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	80 e7       	ldi	r24, 0x70	; 112
 166:	92 e0       	ldi	r25, 0x02	; 2
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <lcd_custom_character+0x9c>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_custom_character+0xa6>
 172:	00 00       	nop
 174:	08 95       	ret

00000176 <main>:
	_delay_ms(100);
}

int main(){
	DDRC = 0xFF; DDRD = 0xE0;
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	84 bb       	out	0x14, r24	; 20
 17a:	80 ee       	ldi	r24, 0xE0	; 224
 17c:	81 bb       	out	0x11, r24	; 17
	PORTC = 0x00; PORTD = 0x00;
 17e:	15 ba       	out	0x15, r1	; 21
 180:	12 ba       	out	0x12, r1	; 18
	lcd_init();
 182:	0e 94 59 00 	call	0xb2	; 0xb2 <lcd_init>
	lcd_custom_character();
 186:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_custom_character>
 18a:	ff cf       	rjmp	.-2      	; 0x18a <main+0x14>

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>

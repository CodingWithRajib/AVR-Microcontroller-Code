
4x4 keypad interface with 8bit lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000322  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000322  00000396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2f  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000674  00000000  00000000  00000f77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000509  00000000  00000000  000015eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001af4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000395  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000486  00000000  00000000  00001ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000237f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	0f 01       	movw	r0, r30
  56:	16 01       	movw	r2, r12
  58:	1d 01       	movw	r2, r26
  5a:	24 01       	movw	r4, r8
  5c:	2b 01       	movw	r4, r22
  5e:	32 01       	movw	r6, r4
  60:	39 01       	movw	r6, r18
  62:	40 01       	movw	r8, r0
  64:	47 01       	movw	r8, r14
  66:	4e 01       	movw	r8, r28
  68:	55 01       	movw	r10, r10
  6a:	5c 01       	movw	r10, r24
  6c:	63 01       	movw	r12, r6
  6e:	6b 01       	movw	r12, r22
  70:	72 01       	movw	r14, r4
  72:	79 01       	movw	r14, r18

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e2 e2       	ldi	r30, 0x22	; 34
  88:	f3 e0       	ldi	r31, 0x03	; 3
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a6 36       	cpi	r26, 0x66	; 102
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
  96:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  9a:	0c 94 8f 01 	jmp	0x31e	; 0x31e <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <cmd>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>

void cmd(char a){
	PORTC = a;
  a2:	85 bb       	out	0x15, r24	; 21
	PORTD = 0x20;
  a4:	80 e2       	ldi	r24, 0x20	; 32
  a6:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	8f e9       	ldi	r24, 0x9F	; 159
  aa:	9f e0       	ldi	r25, 0x0F	; 15
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <cmd+0xa>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <cmd+0x10>
  b2:	00 00       	nop
	_delay_us(2000);
	PORTD = 0x00;
  b4:	12 ba       	out	0x12, r1	; 18
  b6:	08 95       	ret

000000b8 <data>:
}

void data(char a){
	PORTC = a;
  b8:	85 bb       	out	0x15, r24	; 21
	PORTD = 0xA0;
  ba:	80 ea       	ldi	r24, 0xA0	; 160
  bc:	82 bb       	out	0x12, r24	; 18
  be:	8f e9       	ldi	r24, 0x9F	; 159
  c0:	9f e0       	ldi	r25, 0x0F	; 15
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <data+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <data+0x10>
  c8:	00 00       	nop
	_delay_us(2000);
	PORTD = 0x80;
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	82 bb       	out	0x12, r24	; 18
  ce:	08 95       	ret

000000d0 <keypad>:
}

int keypad(){
	unsigned char k_in = 0xFF; int k_out = 255;
	
	PORTB = 0xEF;	//select 1st row
  d0:	8f ee       	ldi	r24, 0xEF	; 239
  d2:	88 bb       	out	0x18, r24	; 24
  d4:	8a e1       	ldi	r24, 0x1A	; 26
  d6:	8a 95       	dec	r24
  d8:	f1 f7       	brne	.-4      	; 0xd6 <keypad+0x6>
  da:	00 c0       	rjmp	.+0      	; 0xdc <keypad+0xc>
	_delay_us(10);
	k_in = PINB & 0x0F; //check button presses in 1st row
  dc:	86 b3       	in	r24, 0x16	; 22
  de:	8f 70       	andi	r24, 0x0F	; 15
	if(k_in == 0x07) k_out = 1;			//1-0x07 = 0x0000 0111
  e0:	87 30       	cpi	r24, 0x07	; 7
  e2:	49 f0       	breq	.+18     	; 0xf6 <keypad+0x26>
	else if(k_in == 0x0B) k_out = 2;	//2-0x0000 1011;
  e4:	8b 30       	cpi	r24, 0x0B	; 11
  e6:	51 f0       	breq	.+20     	; 0xfc <keypad+0x2c>
	else if(k_in == 0x0D) k_out = 3;	//3-0x0000 1101;
  e8:	8d 30       	cpi	r24, 0x0D	; 13
  ea:	59 f0       	breq	.+22     	; 0x102 <keypad+0x32>
	else if(k_in == 0x0E) k_out = 4;	//A-0x0000 1011;
  ec:	8e 30       	cpi	r24, 0x0E	; 14
  ee:	61 f4       	brne	.+24     	; 0x108 <keypad+0x38>
  f0:	24 e0       	ldi	r18, 0x04	; 4
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	0b c0       	rjmp	.+22     	; 0x10c <keypad+0x3c>
	unsigned char k_in = 0xFF; int k_out = 255;
	
	PORTB = 0xEF;	//select 1st row
	_delay_us(10);
	k_in = PINB & 0x0F; //check button presses in 1st row
	if(k_in == 0x07) k_out = 1;			//1-0x07 = 0x0000 0111
  f6:	21 e0       	ldi	r18, 0x01	; 1
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	08 c0       	rjmp	.+16     	; 0x10c <keypad+0x3c>
	else if(k_in == 0x0B) k_out = 2;	//2-0x0000 1011;
  fc:	22 e0       	ldi	r18, 0x02	; 2
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	05 c0       	rjmp	.+10     	; 0x10c <keypad+0x3c>
	else if(k_in == 0x0D) k_out = 3;	//3-0x0000 1101;
 102:	23 e0       	ldi	r18, 0x03	; 3
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <keypad+0x3c>
	_delay_us(2000);
	PORTD = 0x80;
}

int keypad(){
	unsigned char k_in = 0xFF; int k_out = 255;
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	30 e0       	ldi	r19, 0x00	; 0
	if(k_in == 0x07) k_out = 1;			//1-0x07 = 0x0000 0111
	else if(k_in == 0x0B) k_out = 2;	//2-0x0000 1011;
	else if(k_in == 0x0D) k_out = 3;	//3-0x0000 1101;
	else if(k_in == 0x0E) k_out = 4;	//A-0x0000 1011;
	
	PORTB = 0xDF;	//select 2nd row 0x1101
 10c:	8f ed       	ldi	r24, 0xDF	; 223
 10e:	88 bb       	out	0x18, r24	; 24
 110:	8a e1       	ldi	r24, 0x1A	; 26
 112:	8a 95       	dec	r24
 114:	f1 f7       	brne	.-4      	; 0x112 <keypad+0x42>
 116:	00 c0       	rjmp	.+0      	; 0x118 <keypad+0x48>
	_delay_us(10);
	k_in = PINB & 0x0F; //check button presses in 2nd row
 118:	96 b3       	in	r25, 0x16	; 22
 11a:	9f 70       	andi	r25, 0x0F	; 15
	if(k_in == 0x07) k_out = 5;			//5-0x07 = 0x0000 0111
 11c:	97 30       	cpi	r25, 0x07	; 7
 11e:	49 f0       	breq	.+18     	; 0x132 <keypad+0x62>
	else if(k_in == 0x0B) k_out = 6;	//6-0x0000 1011;
 120:	9b 30       	cpi	r25, 0x0B	; 11
 122:	51 f0       	breq	.+20     	; 0x138 <keypad+0x68>
	else if(k_in == 0x0D) k_out = 7;	//7-0x0000 1101;
 124:	9d 30       	cpi	r25, 0x0D	; 13
 126:	59 f0       	breq	.+22     	; 0x13e <keypad+0x6e>
	else if(k_in == 0x0E) k_out = 8;	//B-0x0000 1011;
 128:	9e 30       	cpi	r25, 0x0E	; 14
 12a:	59 f4       	brne	.+22     	; 0x142 <keypad+0x72>
 12c:	28 e0       	ldi	r18, 0x08	; 8
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	08 c0       	rjmp	.+16     	; 0x142 <keypad+0x72>
	else if(k_in == 0x0E) k_out = 4;	//A-0x0000 1011;
	
	PORTB = 0xDF;	//select 2nd row 0x1101
	_delay_us(10);
	k_in = PINB & 0x0F; //check button presses in 2nd row
	if(k_in == 0x07) k_out = 5;			//5-0x07 = 0x0000 0111
 132:	25 e0       	ldi	r18, 0x05	; 5
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	05 c0       	rjmp	.+10     	; 0x142 <keypad+0x72>
	else if(k_in == 0x0B) k_out = 6;	//6-0x0000 1011;
 138:	26 e0       	ldi	r18, 0x06	; 6
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <keypad+0x72>
	else if(k_in == 0x0D) k_out = 7;	//7-0x0000 1101;
 13e:	27 e0       	ldi	r18, 0x07	; 7
 140:	30 e0       	ldi	r19, 0x00	; 0
	else if(k_in == 0x0E) k_out = 8;	//B-0x0000 1011;
	
	PORTB = 0xBF;	//select 3rd row
 142:	8f eb       	ldi	r24, 0xBF	; 191
 144:	88 bb       	out	0x18, r24	; 24
 146:	8a e1       	ldi	r24, 0x1A	; 26
 148:	8a 95       	dec	r24
 14a:	f1 f7       	brne	.-4      	; 0x148 <keypad+0x78>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <keypad+0x7e>
	_delay_us(10);
	k_in = PINB & 0x0F; //check button presses in 3rd row
 14e:	96 b3       	in	r25, 0x16	; 22
 150:	9f 70       	andi	r25, 0x0F	; 15
	if(k_in == 0x07) k_out = 9;			//1-0x07 = 0x0000 0111
 152:	97 30       	cpi	r25, 0x07	; 7
 154:	49 f0       	breq	.+18     	; 0x168 <keypad+0x98>
	else if(k_in == 0x0B) k_out = 10;	//2-0x0000 1011;
 156:	9b 30       	cpi	r25, 0x0B	; 11
 158:	51 f0       	breq	.+20     	; 0x16e <keypad+0x9e>
	else if(k_in == 0x0D) k_out = 11;	//3-0x0000 1101;
 15a:	9d 30       	cpi	r25, 0x0D	; 13
 15c:	59 f0       	breq	.+22     	; 0x174 <keypad+0xa4>
	else if(k_in == 0x0E) k_out = 12;	//C-0x0000 1011;
 15e:	9e 30       	cpi	r25, 0x0E	; 14
 160:	59 f4       	brne	.+22     	; 0x178 <keypad+0xa8>
 162:	2c e0       	ldi	r18, 0x0C	; 12
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	08 c0       	rjmp	.+16     	; 0x178 <keypad+0xa8>
	else if(k_in == 0x0E) k_out = 8;	//B-0x0000 1011;
	
	PORTB = 0xBF;	//select 3rd row
	_delay_us(10);
	k_in = PINB & 0x0F; //check button presses in 3rd row
	if(k_in == 0x07) k_out = 9;			//1-0x07 = 0x0000 0111
 168:	29 e0       	ldi	r18, 0x09	; 9
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	05 c0       	rjmp	.+10     	; 0x178 <keypad+0xa8>
	else if(k_in == 0x0B) k_out = 10;	//2-0x0000 1011;
 16e:	2a e0       	ldi	r18, 0x0A	; 10
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <keypad+0xa8>
	else if(k_in == 0x0D) k_out = 11;	//3-0x0000 1101;
 174:	2b e0       	ldi	r18, 0x0B	; 11
 176:	30 e0       	ldi	r19, 0x00	; 0
	else if(k_in == 0x0E) k_out = 12;	//C-0x0000 1011;
	
	PORTB = 0x7F;	//select 4th row
 178:	8f e7       	ldi	r24, 0x7F	; 127
 17a:	88 bb       	out	0x18, r24	; 24
 17c:	8a e1       	ldi	r24, 0x1A	; 26
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <keypad+0xae>
 182:	00 c0       	rjmp	.+0      	; 0x184 <keypad+0xb4>
	_delay_us(10);
	k_in = PINB & 0x0F; //check button presses in 4th row
 184:	96 b3       	in	r25, 0x16	; 22
 186:	9f 70       	andi	r25, 0x0F	; 15
	if(k_in == 0x07) k_out = 13;			//1-0x07 = 0x0000 0111
 188:	97 30       	cpi	r25, 0x07	; 7
 18a:	49 f0       	breq	.+18     	; 0x19e <keypad+0xce>
	else if(k_in == 0x0B) k_out = 14;	//2-0x0000 1011;
 18c:	9b 30       	cpi	r25, 0x0B	; 11
 18e:	51 f0       	breq	.+20     	; 0x1a4 <keypad+0xd4>
	else if(k_in == 0x0D) k_out = 15;	//3-0x0000 1101;
 190:	9d 30       	cpi	r25, 0x0D	; 13
 192:	59 f0       	breq	.+22     	; 0x1aa <keypad+0xda>
	else if(k_in == 0x0E) k_out = 16;	//D-0x0000 1011;
 194:	9e 30       	cpi	r25, 0x0E	; 14
 196:	59 f4       	brne	.+22     	; 0x1ae <keypad+0xde>
 198:	20 e1       	ldi	r18, 0x10	; 16
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	08 c0       	rjmp	.+16     	; 0x1ae <keypad+0xde>
	else if(k_in == 0x0E) k_out = 12;	//C-0x0000 1011;
	
	PORTB = 0x7F;	//select 4th row
	_delay_us(10);
	k_in = PINB & 0x0F; //check button presses in 4th row
	if(k_in == 0x07) k_out = 13;			//1-0x07 = 0x0000 0111
 19e:	2d e0       	ldi	r18, 0x0D	; 13
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	05 c0       	rjmp	.+10     	; 0x1ae <keypad+0xde>
	else if(k_in == 0x0B) k_out = 14;	//2-0x0000 1011;
 1a4:	2e e0       	ldi	r18, 0x0E	; 14
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <keypad+0xde>
	else if(k_in == 0x0D) k_out = 15;	//3-0x0000 1101;
 1aa:	2f e0       	ldi	r18, 0x0F	; 15
 1ac:	30 e0       	ldi	r19, 0x00	; 0
	else if(k_in == 0x0E) k_out = 16;	//D-0x0000 1011;
	
	return k_out;
}
 1ae:	c9 01       	movw	r24, r18
 1b0:	08 95       	ret

000001b2 <display>:

void display(char *a){
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	ec 01       	movw	r28, r24
	while((*a) != '\0'){
 1b8:	88 81       	ld	r24, Y
 1ba:	88 23       	and	r24, r24
 1bc:	31 f0       	breq	.+12     	; 0x1ca <display+0x18>
 1be:	21 96       	adiw	r28, 0x01	; 1
		data(*a);
 1c0:	0e 94 5c 00 	call	0xb8	; 0xb8 <data>
	
	return k_out;
}

void display(char *a){
	while((*a) != '\0'){
 1c4:	89 91       	ld	r24, Y+
 1c6:	81 11       	cpse	r24, r1
 1c8:	fb cf       	rjmp	.-10     	; 0x1c0 <display+0xe>
		data(*a);
		a++;
	}
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <main>:
}
*/

int main(){
	int k = 255;
	DDRD = 0xE0; DDRC = 0xFF; DDRB = 0xF0;
 1d0:	80 ee       	ldi	r24, 0xE0	; 224
 1d2:	81 bb       	out	0x11, r24	; 17
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	84 bb       	out	0x14, r24	; 20
 1d8:	90 ef       	ldi	r25, 0xF0	; 240
 1da:	97 bb       	out	0x17, r25	; 23
	PORTD = 0x00; PORTC = 0x00; PORTB = 0xFF;
 1dc:	12 ba       	out	0x12, r1	; 18
 1de:	15 ba       	out	0x15, r1	; 21
 1e0:	88 bb       	out	0x18, r24	; 24
	cmd(0x38); cmd(0x80); cmd(0x01);
 1e2:	88 e3       	ldi	r24, 0x38	; 56
 1e4:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
 1e8:	80 e8       	ldi	r24, 0x80	; 128
 1ea:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
	cmd(0x0E); cmd(0x06);
 1f4:	8e e0       	ldi	r24, 0x0E	; 14
 1f6:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
 1fa:	86 e0       	ldi	r24, 0x06	; 6
 1fc:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
	while(1){
		k = keypad();
 200:	0e 94 68 00 	call	0xd0	; 0xd0 <keypad>
		if(k != 255){
 204:	8f 3f       	cpi	r24, 0xFF	; 255
 206:	91 05       	cpc	r25, r1
 208:	d9 f3       	breq	.-10     	; 0x200 <main+0x30>
			switch(k){
 20a:	fc 01       	movw	r30, r24
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	e0 31       	cpi	r30, 0x10	; 16
 210:	f1 05       	cpc	r31, r1
 212:	08 f0       	brcs	.+2      	; 0x216 <main+0x46>
 214:	74 c0       	rjmp	.+232    	; 0x2fe <main+0x12e>
 216:	e6 5d       	subi	r30, 0xD6	; 214
 218:	ff 4f       	sbci	r31, 0xFF	; 255
 21a:	0c 94 89 01 	jmp	0x312	; 0x312 <__tablejump2__>
				case 1:
				cmd(0x01);
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
				data('7');
 224:	87 e3       	ldi	r24, 0x37	; 55
 226:	0e 94 5c 00 	call	0xb8	; 0xb8 <data>
				break;
 22a:	69 c0       	rjmp	.+210    	; 0x2fe <main+0x12e>
				
				case 2:
				cmd(0x01);
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
				data('8');
 232:	88 e3       	ldi	r24, 0x38	; 56
 234:	0e 94 5c 00 	call	0xb8	; 0xb8 <data>
				break;
 238:	62 c0       	rjmp	.+196    	; 0x2fe <main+0x12e>
				
				case 3:
				cmd(0x01);
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
				data('9');
 240:	89 e3       	ldi	r24, 0x39	; 57
 242:	0e 94 5c 00 	call	0xb8	; 0xb8 <data>
				break;
 246:	5b c0       	rjmp	.+182    	; 0x2fe <main+0x12e>
				
				case 4:
				cmd(0x01);
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
				data('/');
 24e:	8f e2       	ldi	r24, 0x2F	; 47
 250:	0e 94 5c 00 	call	0xb8	; 0xb8 <data>
				break;
 254:	54 c0       	rjmp	.+168    	; 0x2fe <main+0x12e>
				
				case 5:
				cmd(0x01);
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
				data('4');
 25c:	84 e3       	ldi	r24, 0x34	; 52
 25e:	0e 94 5c 00 	call	0xb8	; 0xb8 <data>
				break;
 262:	4d c0       	rjmp	.+154    	; 0x2fe <main+0x12e>
				
				case 6:
				cmd(0x01);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
				data('5');
 26a:	85 e3       	ldi	r24, 0x35	; 53
 26c:	0e 94 5c 00 	call	0xb8	; 0xb8 <data>
				break;
 270:	46 c0       	rjmp	.+140    	; 0x2fe <main+0x12e>
				
				case 7:
				cmd(0x01);
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
				data('6');
 278:	86 e3       	ldi	r24, 0x36	; 54
 27a:	0e 94 5c 00 	call	0xb8	; 0xb8 <data>
				break;
 27e:	3f c0       	rjmp	.+126    	; 0x2fe <main+0x12e>
				
				case 8:
				cmd(0x01);
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
				data('*');
 286:	8a e2       	ldi	r24, 0x2A	; 42
 288:	0e 94 5c 00 	call	0xb8	; 0xb8 <data>
				break;
 28c:	38 c0       	rjmp	.+112    	; 0x2fe <main+0x12e>
				
				case 9:
				cmd(0x01);
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
				data('1');
 294:	81 e3       	ldi	r24, 0x31	; 49
 296:	0e 94 5c 00 	call	0xb8	; 0xb8 <data>
				break;
 29a:	31 c0       	rjmp	.+98     	; 0x2fe <main+0x12e>
				
				case 10:
				cmd(0x01);
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
				data('2');
 2a2:	82 e3       	ldi	r24, 0x32	; 50
 2a4:	0e 94 5c 00 	call	0xb8	; 0xb8 <data>
				break;
 2a8:	2a c0       	rjmp	.+84     	; 0x2fe <main+0x12e>
				
				case 11:
				cmd(0x01);
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
				data('3');
 2b0:	83 e3       	ldi	r24, 0x33	; 51
 2b2:	0e 94 5c 00 	call	0xb8	; 0xb8 <data>
				break;
 2b6:	23 c0       	rjmp	.+70     	; 0x2fe <main+0x12e>
				
				case 12:
				cmd(0x01);
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
				data('-');
 2be:	8d e2       	ldi	r24, 0x2D	; 45
 2c0:	0e 94 5c 00 	call	0xb8	; 0xb8 <data>
				break;
 2c4:	1c c0       	rjmp	.+56     	; 0x2fe <main+0x12e>
				
				case 13:
				cmd(0x01);
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
				display("ON/C");
 2cc:	80 e6       	ldi	r24, 0x60	; 96
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <display>
				break;
 2d4:	14 c0       	rjmp	.+40     	; 0x2fe <main+0x12e>
				
				case 14:
				cmd(0x01);
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
				data('0');
 2dc:	80 e3       	ldi	r24, 0x30	; 48
 2de:	0e 94 5c 00 	call	0xb8	; 0xb8 <data>
				break;
 2e2:	0d c0       	rjmp	.+26     	; 0x2fe <main+0x12e>
				
				case 15:
				cmd(0x01);
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
				data('=');
 2ea:	8d e3       	ldi	r24, 0x3D	; 61
 2ec:	0e 94 5c 00 	call	0xb8	; 0xb8 <data>
				break;
 2f0:	06 c0       	rjmp	.+12     	; 0x2fe <main+0x12e>
				
				case 16:
				cmd(0x01);
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 51 00 	call	0xa2	; 0xa2 <cmd>
				data('+');
 2f8:	8b e2       	ldi	r24, 0x2B	; 43
 2fa:	0e 94 5c 00 	call	0xb8	; 0xb8 <data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fe:	2f ef       	ldi	r18, 0xFF	; 255
 300:	82 e5       	ldi	r24, 0x52	; 82
 302:	97 e0       	ldi	r25, 0x07	; 7
 304:	21 50       	subi	r18, 0x01	; 1
 306:	80 40       	sbci	r24, 0x00	; 0
 308:	90 40       	sbci	r25, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <main+0x134>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <main+0x13e>
 30e:	00 00       	nop
 310:	77 cf       	rjmp	.-274    	; 0x200 <main+0x30>

00000312 <__tablejump2__>:
 312:	ee 0f       	add	r30, r30
 314:	ff 1f       	adc	r31, r31
 316:	05 90       	lpm	r0, Z+
 318:	f4 91       	lpm	r31, Z
 31a:	e0 2d       	mov	r30, r0
 31c:	09 94       	ijmp

0000031e <_exit>:
 31e:	f8 94       	cli

00000320 <__stop_program>:
 320:	ff cf       	rjmp	.-2      	; 0x320 <__stop_program>

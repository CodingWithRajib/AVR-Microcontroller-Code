
UART only transmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000669  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005aa  00000000  00000000  00000809  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026c  00000000  00000000  00000db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001020  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000354  00000000  00000000  00001054  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000140f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <transmit>:
#include <avr/io.h>
#include <util/delay.h>


void transmit(char a){
	UDR = a;
  6c:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA & 0x40) == 0){
  6e:	5e 99       	sbic	0x0b, 6	; 11
  70:	08 c0       	rjmp	.+16     	; 0x82 <transmit+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	8f e1       	ldi	r24, 0x1F	; 31
  74:	9e e4       	ldi	r25, 0x4E	; 78
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <transmit+0xa>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <transmit+0x10>
  7c:	00 00       	nop
  7e:	5e 9b       	sbis	0x0b, 6	; 11
  80:	f8 cf       	rjmp	.-16     	; 0x72 <transmit+0x6>
  82:	08 95       	ret

00000084 <main>:
		_delay_ms(10);
	}
}

int main(){
	DDRD = 0x02; PORTD = 0x00;
  84:	82 e0       	ldi	r24, 0x02	; 2
  86:	81 bb       	out	0x11, r24	; 17
  88:	12 ba       	out	0x12, r1	; 18
	UCSRA = 0x00; UCSRB = 0x18; UCSRC = 0x06;
  8a:	1b b8       	out	0x0b, r1	; 11
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
  90:	86 e0       	ldi	r24, 0x06	; 6
  92:	80 bd       	out	0x20, r24	; 32
	UBRRH = 0x00; UBRRL = 0x33; //9600 bps for 8MHz crystal
  94:	10 bc       	out	0x20, r1	; 32
  96:	83 e3       	ldi	r24, 0x33	; 51
  98:	89 b9       	out	0x09, r24	; 9
	transmit('H');
  9a:	88 e4       	ldi	r24, 0x48	; 72
  9c:	0e 94 36 00 	call	0x6c	; 0x6c <transmit>
	transmit('$');
  a0:	84 e2       	ldi	r24, 0x24	; 36
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <transmit>
	transmit('z');
  a6:	8a e7       	ldi	r24, 0x7A	; 122
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <transmit>
	transmit('6');
  ac:	86 e3       	ldi	r24, 0x36	; 54
  ae:	0e 94 36 00 	call	0x6c	; 0x6c <transmit>
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0x2e>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
